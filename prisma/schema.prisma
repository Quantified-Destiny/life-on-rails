// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tag {
  id      String @id @default(cuid())
  name    String
  ownerId String

  owner    User       @relation(fields: [ownerId], references: [id])
  GoalTag  GoalTag[]
  HabitTag HabitTag[]

  @@index([ownerId])
}

model GoalTag {
  id     String @id @default(cuid())
  goalId String
  tagId  String
  goal   Goal   @relation(fields: [goalId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@index([goalId])
  @@index([tagId])
}

model HabitTag {
  id      String @id @default(cuid())
  habitId String
  tagId   String
  habit   Habit  @relation(fields: [habitId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])

  @@index([habitId])
  @@index([tagId])
}

model Goal {
  id          String                   @id @default(cuid())
  name        String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  ownerId     String
  owner       User                     @relation(fields: [ownerId], references: [id])
  habits      HabitMeasuresGoal[]
  subjectives SubjectiveMeasuresGoal[]
  GoalTag     GoalTag[]

  @@index([ownerId])
}

enum FrequencyHorizon {
  DAY
  WEEK
  MONTH
}

model Habit {
  id               String              @id @default(cuid())
  description      String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  ownerId          String
  frequencyHorizon FrequencyHorizon    @default(DAY)
  frequency        Int                 @default(1)
  owner            User                @relation(fields: [ownerId], references: [id])
  completions      HabitCompletion[]
  goals            HabitMeasuresGoal[]
  HabitTag         HabitTag[]

  @@index([ownerId])
}

model HabitMeasuresGoal {
  id      String @id @default(cuid())
  goalId  String
  habitId String

  goal  Goal  @relation(fields: [goalId], references: [id])
  habit Habit @relation(fields: [habitId], references: [id])

  @@index([goalId])
  @@index([habitId])
}

model HabitCompletion {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  habitId     String
  isCompleted Boolean  @default(true)
  Habit       Habit    @relation(fields: [habitId], references: [id])

  @@index([date])
  @@index([habitId])
}

model SubjectiveMeasuresGoal {
  id           String @id @default(cuid())
  goalId       String
  subjectiveId String

  goal       Goal       @relation(fields: [goalId], references: [id])
  subjective Subjective @relation(fields: [subjectiveId], references: [id])

  @@index([goalId])
  @@index([subjectiveId])
}

model Subjective {
  id                String                   @id @default(cuid())
  prompt            String
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  ownerId           String
  owner             User                     @relation(fields: [ownerId], references: [id])
  goals             SubjectiveMeasuresGoal[]
  subjectiveAnswers SubjectiveAnswer[]

  @@index([ownerId])
}

model SubjectiveAnswer {
  id           String     @id @default(cuid())
  score        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subjectiveId String
  subjective   Subjective @relation(fields: [subjectiveId], references: [id])

  @@index([subjectiveId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Goal          Goal[]
  Habit         Habit[]
  Subjective    Subjective[]
  Tag           Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
