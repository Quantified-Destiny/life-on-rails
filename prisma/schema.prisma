// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tag {
  id      String @id @default(cuid())
  name    String
  ownerId String

  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  GoalTag   GoalTag[]
  HabitTag  HabitTag[]
  MetricTag MetricTag[]

  @@unique([ownerId, name])
  @@index([ownerId])
}

model GoalTag {
  id     String @id @default(cuid())
  goalId String
  tagId  String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, goalId])
  @@index([goalId])
  @@index([tagId])
}

model HabitTag {
  id      String @id @default(cuid())
  habitId String
  tagId   String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, habitId])
  @@index([habitId])
  @@index([tagId])
}

model MetricTag {
  id       String @id @default(cuid())
  metricId String @map("metricTag")
  tagId    String
  metric   Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, metricId])
  @@index([metricId])
  @@index([tagId])
}

model Goal {
  id        String               @id @default(cuid())
  name      String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  ownerId   String
  owner     User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  habits    HabitMeasuresGoal[]
  metrics   MetricMeasuresGoal[]
  GoalTag   GoalTag[]

  @@index([ownerId])
}

enum FrequencyHorizon {
  DAY
  WEEK
}

model Habit {
  id               String              @id @default(cuid())
  description      String
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  ownerId          String
  frequencyHorizon FrequencyHorizon    @default(DAY)
  frequency        Int                 @default(1)
  owner            User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  // the weight for completions in calculating score. Should be 0-1
  completionWeight Float               @default(1)
  completions      HabitCompletion[]
  goals            HabitMeasuresGoal[]
  HabitTag         HabitTag[]
  metrics          LinkedMetric[]

  @@index([ownerId])
}

// links a habit to post-completion metrics
model LinkedMetric {
  id       String   @id @default(cuid())
  date     DateTime @default(now())
  habitId  String
  habit    Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  metricId String
  metric   Metric   @relation(fields: [metricId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([metricId])
}

model HabitCompletion {
  id            String         @id @default(cuid())
  date          DateTime       @default(now())
  habitId       String
  isCompleted   Boolean        @default(true)
  Habit         Habit          @relation(fields: [habitId], references: [id], onDelete: Cascade)
  linkedAnswers MetricAnswer[]
  memo          String?

  @@index([date])
  @@index([habitId])
}

model HabitMeasuresGoal {
  id      String @id @default(cuid())
  goalId  String
  habitId String
  weight  Int    @default(1)

  goal  Goal  @relation(fields: [goalId], references: [id])
  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([goalId, habitId])
  @@index([goalId])
  @@index([habitId])
}

model MetricMeasuresGoal {
  id       String @id @default(cuid())
  goalId   String
  metricId String
  weight   Int    @default(1)

  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  metric Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)

  @@unique([goalId, metricId])
  @@index([goalId])
  @@index([metricId])
}

enum AnswerFormat {
  FIVE_POINT
  FIVE_POINT_MID
  NUMERIC_INPUT
}

model Metric {
  id               String               @id @default(cuid())
  prompt           String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  ownerId          String
  owner            User                 @relation(fields: [ownerId], references: [id])
  goals            MetricMeasuresGoal[]
  format           AnswerFormat         @default(FIVE_POINT)
  metricAnswers    MetricAnswer[]
  completionMetric LinkedMetric[]
  MetricTag        MetricTag[]

  @@index([ownerId])
}

model MetricAnswer {
  id        String   @id @default(cuid())
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metricId  String
  metric    Metric   @relation(fields: [metricId], references: [id])
  memo      String?

  // if this answer is linked to a metric, this will specify which habit-completion this answer relates to
  HabitCompletion   HabitCompletion? @relation(fields: [habitCompletionId], references: [id])
  habitCompletionId String?

  @@index([metricId])
  @@index([habitCompletionId])
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  scoringWeeks  Int       @default(2)
  accounts      Account[]
  sessions      Session[]
  Goal          Goal[]
  Habit         Habit[]
  metric        Metric[]
  Tag           Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
