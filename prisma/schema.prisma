generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DIRECT_URL")
  relationMode = "prisma"
}

model Tag {
  id      String      @id @default(cuid())
  name    String
  ownerId String
  owner   User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  goals   GoalTag[]
  habits  HabitTag[]
  metrics MetricTag[]

  @@unique([ownerId, name])
  @@index([ownerId])
}

model GoalTag {
  id     String @id @default(cuid())
  goalId String
  tagId  String
  goal   Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, goalId])
  @@index([goalId])
  @@index([tagId])
}

model HabitTag {
  id      String @id @default(cuid())
  habitId String
  tagId   String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, habitId])
  @@index([habitId])
  @@index([tagId])
}

model MetricTag {
  id       String @id @default(cuid())
  metricId String
  tagId    String
  metric   Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([tagId, metricId], map: "MetricTag_tagId_metricTag_key")
  @@index([metricId], map: "MetricTag_metricTag_idx")
  @@index([tagId])
}

model Goal {
  id         String               @id @default(cuid())
  name       String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  ownerId    String
  archived   Boolean              @default(false)
  archivedAt DateTime             @default(now())
  owner      User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  habits     HabitMeasuresGoal[]
  metrics    MetricMeasuresGoal[]
  tags       GoalTag[]

  @@index([ownerId])
}

model Habit {
  id               String              @id @default(cuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  ownerId          String
  description      String
  frequency        Int                 @default(1)
  frequencyHorizon FrequencyHorizon    @default(DAY)
  completionWeight Float               @default(1)
  archived         Boolean             @default(false)
  archivedAt       DateTime            @default(now())
  owner            User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  completions      HabitCompletion[]
  goals            HabitMeasuresGoal[]
  tags             HabitTag[]
  metrics          LinkedMetric[]

  @@index([ownerId])
}

model LinkedMetric {
  id       String   @id @default(cuid())
  date     DateTime @default(now())
  habitId  String
  metricId String
  habit    Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  metric   Metric   @relation(fields: [metricId], references: [id], onDelete: Cascade)

  @@index([habitId])
  @@index([metricId])
}

model HabitCompletion {
  id            String         @id @default(cuid())
  habitId       String
  date          DateTime       @default(now())
  memo          String?
  Habit         Habit          @relation(fields: [habitId], references: [id], onDelete: Cascade)
  linkedAnswers MetricAnswer[]

  @@index([date])
  @@index([habitId])
}

model HabitMeasuresGoal {
  id      String @id @default(cuid())
  goalId  String
  habitId String
  weight  Int    @default(1)
  goal    Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([goalId, habitId])
  @@index([goalId])
  @@index([habitId])
}

model MetricMeasuresGoal {
  id       String @id @default(cuid())
  goalId   String
  metricId String
  weight   Int    @default(1)
  goal     Goal   @relation(fields: [goalId], references: [id], onDelete: Cascade)
  metric   Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)

  @@unique([goalId, metricId])
  @@index([goalId])
  @@index([metricId])
}

model AnswerFormat {
  id     String   @id @default(cuid())
  format Format
  start  Float?
  end    Float?
  Metric Metric[]
}

model Metric {
  id               String               @id @default(cuid())
  prompt           String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  ownerId          String
  formatId         String
  archived         Boolean              @default(false)
  archivedAt       DateTime             @default(now())
  owner            User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  goals            MetricMeasuresGoal[]
  format           AnswerFormat         @relation(fields: [formatId], references: [id], onDelete: Cascade)
  metricAnswers    MetricAnswer[]
  completionMetric LinkedMetric[]
  tags             MetricTag[]

  @@index([ownerId])
  @@index([formatId])
}

model MetricAnswer {
  id                String           @id @default(cuid())
  value             Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  metricId          String
  habitCompletionId String?
  memo              String?
  score             Float
  metric            Metric           @relation(fields: [metricId], references: [id], onDelete: Cascade)
  HabitCompletion   HabitCompletion? @relation(fields: [habitCompletionId], references: [id])

  @@index([metricId])
  @@index([habitCompletionId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  scoringWeeks  Int           @default(2)
  scoringUnit   ScoringFormat @default(Normalized)
  accounts      Account[]
  sessions      Session[]
  Goal          Goal[]
  Habit         Habit[]
  metric        Metric[]
  Tag           Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Preferences {
  userId       String                  @id
  scoringWeeks Int                     @default(2)
  scoringUnit  Preferences_scoringUnit @default(Normalized)
}

enum FrequencyHorizon {
  DAY
  WEEK
}

enum Format {
  FIVE_POINT
  NUMERIC_INPUT
}

enum ScoringFormat {
  Percentage
  Normalized
}

enum Preferences_scoringUnit {
  Percentage
  Normalized
}
